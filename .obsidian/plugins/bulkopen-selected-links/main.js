/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SelectOpenPlugIn
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  paneType: "tab"
};
var SelectOpenPlugIn = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.addCommand({
      id: "select-open-links",
      name: "Select Open Links",
      editorCallback: (editor, view) => {
        this.selectOpenTexts(view);
      }
    });
  }
  selectOpenTexts(view) {
    var files = this.getFilesName(view);
    files.forEach((fileName) => {
      if (fileName)
        this.app.workspace.openLinkText(fileName, "", this.settings.paneType, { active: false });
    });
  }
  // https://github.com/mrjackphil/obsidian-crosslink-between-notes
  getFilesName(view) {
    const cm = view.editor;
    const cursor = cm.getCursor();
    const selectedRange = cm.getSelection();
    const line = selectedRange || cm.getLine(cursor.line);
    const regexpWiki = /\[\[.+?]]/gi;
    const linksWiki = line.match(regexpWiki) || [];
    const ar = [linksWiki].filter((e) => e.length);
    return ar.flat().map((lnk) => {
      const wikiName = lnk.replace(/(\[\[|]])/g, "").replace(/\|.+/, "").replace(/#.+/, "");
      return wikiName;
    });
  }
  getFilesFromLineOrSelection(view) {
    const cm = view.editor;
    const cursor = cm.getCursor();
    const selectedRange = cm.getSelection();
    const line = selectedRange || cm.getLine(cursor.line);
    const regexpWiki = /\[\[.+?]]/gi;
    const linksWiki = line.match(regexpWiki) || [];
    const ar = [linksWiki].filter((e) => e.length);
    return ar.flat().map((lnk) => {
      const wikiName = lnk.replace(/(\[\[|]])/g, "").replace(/\|.+/, "").replace(/#.+/, "");
      return this.getFilesByName(wikiName);
    });
  }
  getFilesByName(name) {
    const files = this.app.vault.getFiles();
    if (Array.isArray(name)) {
      return files.filter(
        (e) => name.includes(e.name) || name.includes(e.path) || name.includes(e.basename)
      )[0];
    }
    return files.filter(
      (e) => e.name === name || e.path === name || e.basename === name
    )[0];
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Open Selected Links plugin" });
    new import_obsidian.Setting(containerEl).setName("Select a procedure of opening a linked document").addDropdown((dropDown) => {
      dropDown.addOption("tab", "Tab");
      dropDown.addOption("window", "Window");
      dropDown.addOption("split", "Split");
      dropDown.onChange(async (value) => {
        this.plugin.settings.paneType = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
